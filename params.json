{"google":"","note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"Tree widget for angularjs","body":"# Description\r\n\r\nTree control directive for [angularjs](http://www.angularjs.org).\r\n\r\n# Installation\r\n\r\nCopy the script into your project and add a script tag to your page.\r\n\r\n```html\r\n<script src=\"/js/angular.tree.js\"></script>\r\n```\r\n\r\nAdd a dependency to your application module.\r\n\r\n```javascript\r\nangular.module('myApp', ['angularTree']);\r\n```\r\n\r\nAdd a tree to your application. See [Usage](#usage).\r\n\r\n# Usage\r\n\r\nIn this simple example 'model' is an expression in the current scope that results\r\nin an array of objects. The inner li is the template for the tree nodes.\r\nThe default name for the current tree item is 'item' and each item\r\nshould contain a list of child items in a property name 'children'.\r\n\r\n```html\r\n<ul ng-tree=\"model\">\r\n    <li>{{item.name}}</li>\r\n</ul>\r\n```\r\n\r\nExample model:\r\n\r\n```javascript\r\n$scope.model = [\r\n    {\r\n        name: 'Item 1 Name',\r\n        children: [\r\n            {\r\n                name: 'Item 2 Name'\r\n            }, {\r\n                name: 'Item 3 Name'\r\n            }\r\n        ]\r\n    }\r\n];       \r\n```\r\n\r\n## Context Variable and Collection Name\r\n\r\nThe default children collection and tree node context variable name can\r\nbe overridden on the tree node template with an each expression.\r\n\r\nThe default expression is _item in children_.\r\n\r\n```html\r\n<ul ng-tree=\"model\">\r\n    <li each=\"obj in subItems\">{{obj.name}}</li>\r\n</ul>\r\n```\r\n\r\n## Item Template Content Div\r\n\r\nThe contents of the tree item template will be automatically wrapped in\r\na div element.\r\n\r\nSo this template:\r\n\r\n```html\r\n<ul ng-tree=\"model\">\r\n    <li>{{item.name}}</li>\r\n</ul>\r\n```\r\n\r\nwill result in the following HTML:\r\n\r\n```html\r\n<ul ng-tree=\"tree\">\r\n    <li class=\"ng-scope\">\r\n        <div class=\"ng-binding\">Item 1 Name</div>\r\n        <ul>\r\n            <li class=\"ng-scope\">\r\n                <div class=\"ng-binding\">Item 2 Name</div>\r\n                <ul></ul>\r\n            </li>\r\n            <li class=\"ng-scope\">\r\n                <div class=\"ng-binding\">Item 3 Name</div>\r\n                <ul></ul>\r\n            </li>\r\n        </ul>\r\n    </li>\r\n</ul>\r\n```\r\n\r\nYou can control the wrapper element yourself by wrapping the contents of\r\nthe item template in a single container element.\r\n\r\nSo this template:\r\n\r\n```html\r\n<ul ng-tree=\"model\">\r\n    <li><span>{{item.name}}</span></li>\r\n</ul>\r\n```\r\n\r\nwill result in the following HTML:\r\n\r\n```html\r\n<ul ng-tree=\"tree\">\r\n    <li class=\"ng-scope\">\r\n        <span class=\"ng-binding\">Item 1 Name</span>\r\n        <ul>\r\n            <li class=\"ng-scope\">\r\n                <span class=\"ng-binding\">Item 2 Name</span>\r\n                <ul></ul>\r\n            </li>\r\n            <li class=\"ng-scope\">\r\n                <span class=\"ng-binding\">Item 3 Name</span>\r\n                <ul></ul>\r\n            </li>\r\n        </ul>\r\n    </li>\r\n</ul>\r\n```\r\n\r\n## Selection\r\n\r\nTree items can be selected and deselected if a selection change\r\nexpression is provided. If no select expression is provided, selection\r\nsupport will not be enabled.\r\n\r\nThe 'select' attribute must be an expression that is evaluated in the\r\nscope of the tree node that was selected/deselected. The 'this' variable\r\nof the expression will be the scope of the tree node. A special scope\r\nvariable '$selected' is set to true if the item is selected and false\r\nif not.\r\n\r\n```html\r\n<ul ng-tree=\"model\">\r\n    <li select=\"selected()\">{{item.name}}</li>\r\n</ul>\r\n```\r\n\r\n```javascript\r\n$scope.selected = function () {\r\n    console.log(this.item.name + ' is selected: ' + this.$selected);\r\n};\r\n```\r\n\r\n### Multiple Selection\r\n\r\nMultiple tree nodes can be selected at once by enabling mutli-selection\r\non the tree.\r\n\r\nWhen enabled, holding down the meta key (Control/Command key) allows\r\nthe user to select multiple tree nodes.\r\n\r\nNote: a 'select' expression must be provided to enable selection support\r\nfor the tree.\r\n\r\n```html\r\n<ul ng-tree=\"model\" multiple>\r\n    <li select=\"selected()\">{{item.name}}</li>\r\n</ul>\r\n```\r\n\r\n# License\r\n\r\nThe MIT License (MIT)  \r\nCopyright (c) 2012 Cory Thomas\r\n\r\nSee [LICENSE](angularTree/blob/master/LICENSE)\r\n\r\n","name":"Angular.tree"}